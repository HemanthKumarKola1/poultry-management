// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: public_location.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO location (tenant_id, location, zip_code, latitude, longitude, contact_person, phone)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, tenant_id, location, zip_code, latitude, longitude, contact_person, phone, created_at, updated_at
`

type CreateLocationParams struct {
	TenantID      int32          `json:"tenant_id"`
	Location      string         `json:"location"`
	ZipCode       *string        `json:"zip_code"`
	Latitude      pgtype.Numeric `json:"latitude"`
	Longitude     pgtype.Numeric `json:"longitude"`
	ContactPerson *string        `json:"contact_person"`
	Phone         *string        `json:"phone"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRow(ctx, createLocation,
		arg.TenantID,
		arg.Location,
		arg.ZipCode,
		arg.Latitude,
		arg.Longitude,
		arg.ContactPerson,
		arg.Phone,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Location,
		&i.ZipCode,
		&i.Latitude,
		&i.Longitude,
		&i.ContactPerson,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :exec
DELETE FROM location
WHERE tenant_id = $1 AND id = $2
`

type DeleteLocationParams struct {
	TenantID int32 `json:"tenant_id"`
	ID       int32 `json:"id"`
}

func (q *Queries) DeleteLocation(ctx context.Context, arg DeleteLocationParams) error {
	_, err := q.db.Exec(ctx, deleteLocation, arg.TenantID, arg.ID)
	return err
}

const getLocationByID = `-- name: GetLocationByID :one
SELECT id, tenant_id, location, zip_code, latitude, longitude, contact_person, phone, created_at, updated_at
FROM location
WHERE tenant_id = $1 AND id = $2
`

type GetLocationByIDParams struct {
	TenantID int32 `json:"tenant_id"`
	ID       int32 `json:"id"`
}

func (q *Queries) GetLocationByID(ctx context.Context, arg GetLocationByIDParams) (Location, error) {
	row := q.db.QueryRow(ctx, getLocationByID, arg.TenantID, arg.ID)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Location,
		&i.ZipCode,
		&i.Latitude,
		&i.Longitude,
		&i.ContactPerson,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLocationByName = `-- name: GetLocationByName :one
SELECT id, tenant_id, location, zip_code, latitude, longitude, contact_person, phone, created_at, updated_at
FROM location
WHERE tenant_id = $1 AND location = $2
`

type GetLocationByNameParams struct {
	TenantID int32  `json:"tenant_id"`
	Location string `json:"location"`
}

func (q *Queries) GetLocationByName(ctx context.Context, arg GetLocationByNameParams) (Location, error) {
	row := q.db.QueryRow(ctx, getLocationByName, arg.TenantID, arg.Location)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Location,
		&i.ZipCode,
		&i.Latitude,
		&i.Longitude,
		&i.ContactPerson,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listlocationsByTenant = `-- name: ListlocationsByTenant :many
SELECT id, tenant_id, location, zip_code, latitude, longitude, contact_person, phone, created_at, updated_at
FROM location
WHERE tenant_id = $1
ORDER BY location
`

func (q *Queries) ListlocationsByTenant(ctx context.Context, tenantID int32) ([]Location, error) {
	rows, err := q.db.Query(ctx, listlocationsByTenant, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Location,
			&i.ZipCode,
			&i.Latitude,
			&i.Longitude,
			&i.ContactPerson,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :exec

UPDATE location
SET location = $3, zip_code = $4, latitude = $5, longitude = $6, contact_person = $7, phone = $8, updated_at = now()
WHERE tenant_id = $1 AND id = $2
`

type UpdateLocationParams struct {
	TenantID      int32          `json:"tenant_id"`
	ID            int32          `json:"id"`
	Location      string         `json:"location"`
	ZipCode       *string        `json:"zip_code"`
	Latitude      pgtype.Numeric `json:"latitude"`
	Longitude     pgtype.Numeric `json:"longitude"`
	ContactPerson *string        `json:"contact_person"`
	Phone         *string        `json:"phone"`
}

// Order by location name
func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) error {
	_, err := q.db.Exec(ctx, updateLocation,
		arg.TenantID,
		arg.ID,
		arg.Location,
		arg.ZipCode,
		arg.Latitude,
		arg.Longitude,
		arg.ContactPerson,
		arg.Phone,
	)
	return err
}
