// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: public_tenant.sql

package db

import (
	"context"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO public.tenant (name, license_key)
VALUES ($1, $2)
RETURNING id, name, license_key, created_at, updated_at
`

type CreateTenantParams struct {
	Name       string `json:"name"`
	LicenseKey string `json:"license_key"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, createTenant, arg.Name, arg.LicenseKey)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LicenseKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM public.tenant
WHERE id = $1
`

func (q *Queries) DeleteTenant(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTenant, id)
	return err
}

const getTenant = `-- name: GetTenant :one
SELECT id, name, license_key, created_at, updated_at
FROM public.tenant
WHERE id = $1
`

func (q *Queries) GetTenant(ctx context.Context, id int32) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenant, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LicenseKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenantByLicenseKey = `-- name: GetTenantByLicenseKey :one
SELECT id, name, license_key, created_at, updated_at
FROM public.tenant
WHERE license_key = $1
`

func (q *Queries) GetTenantByLicenseKey(ctx context.Context, licenseKey string) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenantByLicenseKey, licenseKey)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LicenseKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listtenants = `-- name: Listtenants :many
SELECT id, name, license_key, created_at, updated_at
FROM public.tenant
ORDER BY name
`

func (q *Queries) Listtenants(ctx context.Context) ([]Tenant, error) {
	rows, err := q.db.Query(ctx, listtenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tenant
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LicenseKey,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenant = `-- name: UpdateTenant :exec
UPDATE public.tenant
SET name = $1, updated_at = NOW()
WHERE id = $2
`

type UpdateTenantParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) error {
	_, err := q.db.Exec(ctx, updateTenant, arg.Name, arg.ID)
	return err
}
