// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: public_user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO public.user (username, password_hash, role, tenant_id)
VALUES ($1, $2, $3, $4)
RETURNING id, username, role, tenant_id, created_at, updated_at
`

type CreateUserParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	Role         string `json:"role"`
	TenantID     *int32 `json:"tenant_id"`
}

type CreateUserRow struct {
	ID        int32              `json:"id"`
	Username  string             `json:"username"`
	Role      string             `json:"role"`
	TenantID  *int32             `json:"tenant_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.PasswordHash,
		arg.Role,
		arg.TenantID,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM public.user
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, role, tenant_id, created_at, updated_at
FROM public.user
WHERE id = $1
`

type GetUserRow struct {
	ID        int32              `json:"id"`
	Username  string             `json:"username"`
	Role      string             `json:"role"`
	TenantID  *int32             `json:"tenant_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetUser(ctx context.Context, id int32) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, role, password_hash, tenant_id, created_at, updated_at
FROM public.user
WHERE username = $1
`

type GetUserByUsernameRow struct {
	ID           int32              `json:"id"`
	Username     string             `json:"username"`
	Role         string             `json:"role"`
	PasswordHash string             `json:"password_hash"`
	TenantID     *int32             `json:"tenant_id"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.PasswordHash,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listusersByTenant = `-- name: ListusersByTenant :many
SELECT id, username, role, tenant_id, created_at, updated_at
FROM public.user
WHERE tenant_id = $1
ORDER BY username
`

type ListusersByTenantRow struct {
	ID        int32              `json:"id"`
	Username  string             `json:"username"`
	Role      string             `json:"role"`
	TenantID  *int32             `json:"tenant_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) ListusersByTenant(ctx context.Context, tenantID *int32) ([]ListusersByTenantRow, error) {
	rows, err := q.db.Query(ctx, listusersByTenant, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListusersByTenantRow
	for rows.Next() {
		var i ListusersByTenantRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Role,
			&i.TenantID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE public.user
SET username = $1, role = $2, updated_at = NOW()
WHERE id = $3
`

type UpdateUserParams struct {
	Username string `json:"username"`
	Role     string `json:"role"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Username, arg.Role, arg.ID)
	return err
}
