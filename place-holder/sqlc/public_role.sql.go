// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: public_role.sql

package db

import (
	"context"
)

const getRole = `-- name: GetRole :one
SELECT id, name, permissions
FROM public.role
WHERE name = $1
`

func (q *Queries) GetRole(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.Permissions)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, name, permissions
FROM public.role
ORDER BY name
`

func (q *Queries) ListRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name, &i.Permissions); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
