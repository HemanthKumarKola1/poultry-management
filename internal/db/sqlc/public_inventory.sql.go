// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: public_inventory.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInventory = `-- name: CreateInventory :one
INSERT INTO inventory (tenant_id, location_id, chicken_count, feed, load_date)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, tenant_id, location_id, chicken_count, feed, load_date, created_at, updated_at
`

type CreateInventoryParams struct {
	TenantID     int32       `json:"tenant_id"`
	LocationID   int32       `json:"location_id"`
	ChickenCount *int32      `json:"chicken_count"`
	Feed         *int32      `json:"feed"`
	LoadDate     pgtype.Date `json:"load_date"`
}

func (q *Queries) CreateInventory(ctx context.Context, arg CreateInventoryParams) (Inventory, error) {
	row := q.db.QueryRow(ctx, createInventory,
		arg.TenantID,
		arg.LocationID,
		arg.ChickenCount,
		arg.Feed,
		arg.LoadDate,
	)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.LocationID,
		&i.ChickenCount,
		&i.Feed,
		&i.LoadDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInventory = `-- name: DeleteInventory :exec
DELETE FROM inventory
WHERE tenant_id = $1 AND id = $2
`

type DeleteInventoryParams struct {
	TenantID int32 `json:"tenant_id"`
	ID       int32 `json:"id"`
}

func (q *Queries) DeleteInventory(ctx context.Context, arg DeleteInventoryParams) error {
	_, err := q.db.Exec(ctx, deleteInventory, arg.TenantID, arg.ID)
	return err
}

const getInventoryByID = `-- name: GetInventoryByID :one

SELECT id, tenant_id, location_id, chicken_count, feed, load_date, created_at, updated_at
FROM inventory
WHERE tenant_id = $1 AND id = $2
`

type GetInventoryByIDParams struct {
	TenantID int32 `json:"tenant_id"`
	ID       int32 `json:"id"`
}

// Get inventory by location ID
func (q *Queries) GetInventoryByID(ctx context.Context, arg GetInventoryByIDParams) (Inventory, error) {
	row := q.db.QueryRow(ctx, getInventoryByID, arg.TenantID, arg.ID)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.LocationID,
		&i.ChickenCount,
		&i.Feed,
		&i.LoadDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInventoryByLocationID = `-- name: GetInventoryByLocationID :one
SELECT id, tenant_id, location_id, chicken_count, feed, load_date, created_at, updated_at
FROM inventory
WHERE tenant_id = $1 AND location_id = $2
`

type GetInventoryByLocationIDParams struct {
	TenantID   int32 `json:"tenant_id"`
	LocationID int32 `json:"location_id"`
}

func (q *Queries) GetInventoryByLocationID(ctx context.Context, arg GetInventoryByLocationIDParams) (Inventory, error) {
	row := q.db.QueryRow(ctx, getInventoryByLocationID, arg.TenantID, arg.LocationID)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.LocationID,
		&i.ChickenCount,
		&i.Feed,
		&i.LoadDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTotalChickensByTenant = `-- name: GetTotalChickensByTenant :many
SELECT tenant_id, SUM(chicken_count) AS total_chickens
FROM inventory
GROUP BY tenant_id
`

type GetTotalChickensByTenantRow struct {
	TenantID      int32 `json:"tenant_id"`
	TotalChickens int64 `json:"total_chickens"`
}

func (q *Queries) GetTotalChickensByTenant(ctx context.Context) ([]GetTotalChickensByTenantRow, error) {
	rows, err := q.db.Query(ctx, getTotalChickensByTenant)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalChickensByTenantRow
	for rows.Next() {
		var i GetTotalChickensByTenantRow
		if err := rows.Scan(&i.TenantID, &i.TotalChickens); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInventoryByTenant = `-- name: ListInventoryByTenant :many
SELECT id, tenant_id, location_id, chicken_count, feed, load_date, created_at, updated_at
FROM inventory
WHERE tenant_id = $1
`

func (q *Queries) ListInventoryByTenant(ctx context.Context, tenantID int32) ([]Inventory, error) {
	rows, err := q.db.Query(ctx, listInventoryByTenant, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inventory
	for rows.Next() {
		var i Inventory
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.LocationID,
			&i.ChickenCount,
			&i.Feed,
			&i.LoadDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInventory = `-- name: UpdateInventory :exec
UPDATE inventory
SET chicken_count = $3, feed = $4, load_date = $5, updated_at = now()
WHERE tenant_id = $1 AND id = $2
`

type UpdateInventoryParams struct {
	TenantID     int32       `json:"tenant_id"`
	ID           int32       `json:"id"`
	ChickenCount *int32      `json:"chicken_count"`
	Feed         *int32      `json:"feed"`
	LoadDate     pgtype.Date `json:"load_date"`
}

func (q *Queries) UpdateInventory(ctx context.Context, arg UpdateInventoryParams) error {
	_, err := q.db.Exec(ctx, updateInventory,
		arg.TenantID,
		arg.ID,
		arg.ChickenCount,
		arg.Feed,
		arg.LoadDate,
	)
	return err
}
