// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tenant_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFeedSchedule = `-- name: CreateFeedSchedule :one
INSERT INTO feed_schedules (feed_type_id, times_per_day, amount_per_feeding) 
VALUES ($1, $2, $3) 
RETURNING id, feed_type_id, times_per_day, amount_per_feeding, created_at, updated_at
`

type CreateFeedScheduleParams struct {
	FeedTypeID       *int32         `json:"feed_type_id"`
	TimesPerDay      *int32         `json:"times_per_day"`
	AmountPerFeeding pgtype.Numeric `json:"amount_per_feeding"`
}

func (q *Queries) CreateFeedSchedule(ctx context.Context, arg CreateFeedScheduleParams) (FeedSchedule, error) {
	row := q.db.QueryRow(ctx, createFeedSchedule, arg.FeedTypeID, arg.TimesPerDay, arg.AmountPerFeeding)
	var i FeedSchedule
	err := row.Scan(
		&i.ID,
		&i.FeedTypeID,
		&i.TimesPerDay,
		&i.AmountPerFeeding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createFeedType = `-- name: CreateFeedType :one
INSERT INTO feed_types (name, cost_per_unit) 
VALUES ($1, $2) 
RETURNING id, name, cost_per_unit, created_at, updated_at
`

type CreateFeedTypeParams struct {
	Name        string         `json:"name"`
	CostPerUnit pgtype.Numeric `json:"cost_per_unit"`
}

func (q *Queries) CreateFeedType(ctx context.Context, arg CreateFeedTypeParams) (FeedType, error) {
	row := q.db.QueryRow(ctx, createFeedType, arg.Name, arg.CostPerUnit)
	var i FeedType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CostPerUnit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createFeedingLog = `-- name: CreateFeedingLog :one
INSERT INTO feeding_logs (feed_type_id, chicken_ids, amount_fed, date_time, comments) 
VALUES ($1, $2, $3, $4, $5) 
RETURNING id, feed_type_id, chicken_ids, amount_fed, date_time, comments, created_at, updated_at
`

type CreateFeedingLogParams struct {
	FeedTypeID *int32             `json:"feed_type_id"`
	ChickenIds []int32            `json:"chicken_ids"`
	AmountFed  pgtype.Numeric     `json:"amount_fed"`
	DateTime   pgtype.Timestamptz `json:"date_time"`
	Comments   *string            `json:"comments"`
}

func (q *Queries) CreateFeedingLog(ctx context.Context, arg CreateFeedingLogParams) (FeedingLog, error) {
	row := q.db.QueryRow(ctx, createFeedingLog,
		arg.FeedTypeID,
		arg.ChickenIds,
		arg.AmountFed,
		arg.DateTime,
		arg.Comments,
	)
	var i FeedingLog
	err := row.Scan(
		&i.ID,
		&i.FeedTypeID,
		&i.ChickenIds,
		&i.AmountFed,
		&i.DateTime,
		&i.Comments,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createInventory = `-- name: CreateInventory :one
INSERT INTO inventory (location_id, chicken_count, load_date) 
VALUES ($1, $2, $3) 
RETURNING id, location_id, chicken_count, load_date, created_at, updated_at
`

type CreateInventoryParams struct {
	LocationID   *int32      `json:"location_id"`
	ChickenCount *int32      `json:"chicken_count"`
	LoadDate     pgtype.Date `json:"load_date"`
}

func (q *Queries) CreateInventory(ctx context.Context, arg CreateInventoryParams) (Inventory, error) {
	row := q.db.QueryRow(ctx, createInventory, arg.LocationID, arg.ChickenCount, arg.LoadDate)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.ChickenCount,
		&i.LoadDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (name, description) 
VALUES ($1, $2) 
RETURNING id, name, description, created_at, updated_at
`

type CreateLocationParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRow(ctx, createLocation, arg.Name, arg.Description)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFeedSchedule = `-- name: DeleteFeedSchedule :exec
DELETE FROM feed_schedules 
WHERE id = $1
`

func (q *Queries) DeleteFeedSchedule(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFeedSchedule, id)
	return err
}

const deleteFeedType = `-- name: DeleteFeedType :exec
DELETE FROM feed_types 
WHERE id = $1
`

func (q *Queries) DeleteFeedType(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFeedType, id)
	return err
}

const deleteFeedingLog = `-- name: DeleteFeedingLog :exec
DELETE FROM feeding_logs 
WHERE id = $1
`

func (q *Queries) DeleteFeedingLog(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFeedingLog, id)
	return err
}

const deleteInventory = `-- name: DeleteInventory :exec
DELETE FROM inventory 
WHERE id = $1
`

func (q *Queries) DeleteInventory(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteInventory, id)
	return err
}

const deleteLocation = `-- name: DeleteLocation :exec
DELETE FROM locations 
WHERE id = $1
`

func (q *Queries) DeleteLocation(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteLocation, id)
	return err
}

const getAllFeedSchedules = `-- name: GetAllFeedSchedules :many
SELECT id, feed_type_id, times_per_day, amount_per_feeding, created_at, updated_at 
FROM feed_schedules
`

func (q *Queries) GetAllFeedSchedules(ctx context.Context) ([]FeedSchedule, error) {
	rows, err := q.db.Query(ctx, getAllFeedSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedSchedule
	for rows.Next() {
		var i FeedSchedule
		if err := rows.Scan(
			&i.ID,
			&i.FeedTypeID,
			&i.TimesPerDay,
			&i.AmountPerFeeding,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFeedTypes = `-- name: GetAllFeedTypes :many
SELECT id, name, cost_per_unit, created_at, updated_at 
FROM feed_types
`

func (q *Queries) GetAllFeedTypes(ctx context.Context) ([]FeedType, error) {
	rows, err := q.db.Query(ctx, getAllFeedTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedType
	for rows.Next() {
		var i FeedType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CostPerUnit,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFeedingLogs = `-- name: GetAllFeedingLogs :many
SELECT id, feed_type_id, chicken_ids, amount_fed, date_time, comments, created_at, updated_at 
FROM feeding_logs
`

func (q *Queries) GetAllFeedingLogs(ctx context.Context) ([]FeedingLog, error) {
	rows, err := q.db.Query(ctx, getAllFeedingLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedingLog
	for rows.Next() {
		var i FeedingLog
		if err := rows.Scan(
			&i.ID,
			&i.FeedTypeID,
			&i.ChickenIds,
			&i.AmountFed,
			&i.DateTime,
			&i.Comments,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllInventory = `-- name: GetAllInventory :many
SELECT id, location_id, chicken_count, load_date, created_at, updated_at 
FROM inventory
`

func (q *Queries) GetAllInventory(ctx context.Context) ([]Inventory, error) {
	rows, err := q.db.Query(ctx, getAllInventory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inventory
	for rows.Next() {
		var i Inventory
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.ChickenCount,
			&i.LoadDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedScheduleByID = `-- name: GetFeedScheduleByID :one
SELECT id, feed_type_id, times_per_day, amount_per_feeding, created_at, updated_at 
FROM feed_schedules 
WHERE id = $1
`

func (q *Queries) GetFeedScheduleByID(ctx context.Context, id int32) (FeedSchedule, error) {
	row := q.db.QueryRow(ctx, getFeedScheduleByID, id)
	var i FeedSchedule
	err := row.Scan(
		&i.ID,
		&i.FeedTypeID,
		&i.TimesPerDay,
		&i.AmountPerFeeding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeedTypeByID = `-- name: GetFeedTypeByID :one
SELECT id, name, cost_per_unit, created_at, updated_at 
FROM feed_types 
WHERE id = $1
`

func (q *Queries) GetFeedTypeByID(ctx context.Context, id int32) (FeedType, error) {
	row := q.db.QueryRow(ctx, getFeedTypeByID, id)
	var i FeedType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CostPerUnit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeedingLogByID = `-- name: GetFeedingLogByID :one
SELECT id, feed_type_id, chicken_ids, amount_fed, date_time, comments, created_at, updated_at 
FROM feeding_logs 
WHERE id = $1
`

func (q *Queries) GetFeedingLogByID(ctx context.Context, id int32) (FeedingLog, error) {
	row := q.db.QueryRow(ctx, getFeedingLogByID, id)
	var i FeedingLog
	err := row.Scan(
		&i.ID,
		&i.FeedTypeID,
		&i.ChickenIds,
		&i.AmountFed,
		&i.DateTime,
		&i.Comments,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInventoryByID = `-- name: GetInventoryByID :one
SELECT id, location_id, chicken_count, load_date, created_at, updated_at 
FROM inventory 
WHERE id = $1
`

func (q *Queries) GetInventoryByID(ctx context.Context, id int32) (Inventory, error) {
	row := q.db.QueryRow(ctx, getInventoryByID, id)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.ChickenCount,
		&i.LoadDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLocationByID = `-- name: GetLocationByID :one
SELECT id, name, description, created_at, updated_at 
FROM locations 
WHERE id = $1
`

func (q *Queries) GetLocationByID(ctx context.Context, id int32) (Location, error) {
	row := q.db.QueryRow(ctx, getLocationByID, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLocations = `-- name: GetLocations :many
SELECT id, name, description, created_at, updated_at 
FROM locations
`

func (q *Queries) GetLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.Query(ctx, getLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeedSchedule = `-- name: UpdateFeedSchedule :exec
UPDATE feed_schedules 
SET feed_type_id = $1, times_per_day = $2, amount_per_feeding = $3, updated_at = NOW() 
WHERE id = $4
`

type UpdateFeedScheduleParams struct {
	FeedTypeID       *int32         `json:"feed_type_id"`
	TimesPerDay      *int32         `json:"times_per_day"`
	AmountPerFeeding pgtype.Numeric `json:"amount_per_feeding"`
	ID               int32          `json:"id"`
}

func (q *Queries) UpdateFeedSchedule(ctx context.Context, arg UpdateFeedScheduleParams) error {
	_, err := q.db.Exec(ctx, updateFeedSchedule,
		arg.FeedTypeID,
		arg.TimesPerDay,
		arg.AmountPerFeeding,
		arg.ID,
	)
	return err
}

const updateFeedType = `-- name: UpdateFeedType :exec
UPDATE feed_types 
SET name = $1, cost_per_unit = $2, updated_at = NOW() 
WHERE id = $3
`

type UpdateFeedTypeParams struct {
	Name        string         `json:"name"`
	CostPerUnit pgtype.Numeric `json:"cost_per_unit"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateFeedType(ctx context.Context, arg UpdateFeedTypeParams) error {
	_, err := q.db.Exec(ctx, updateFeedType, arg.Name, arg.CostPerUnit, arg.ID)
	return err
}

const updateFeedingLog = `-- name: UpdateFeedingLog :exec
UPDATE feeding_logs 
SET feed_type_id = $1, chicken_ids = $2, amount_fed = $3, date_time = $4, comments = $5, updated_at = NOW() 
WHERE id = $6
`

type UpdateFeedingLogParams struct {
	FeedTypeID *int32             `json:"feed_type_id"`
	ChickenIds []int32            `json:"chicken_ids"`
	AmountFed  pgtype.Numeric     `json:"amount_fed"`
	DateTime   pgtype.Timestamptz `json:"date_time"`
	Comments   *string            `json:"comments"`
	ID         int32              `json:"id"`
}

func (q *Queries) UpdateFeedingLog(ctx context.Context, arg UpdateFeedingLogParams) error {
	_, err := q.db.Exec(ctx, updateFeedingLog,
		arg.FeedTypeID,
		arg.ChickenIds,
		arg.AmountFed,
		arg.DateTime,
		arg.Comments,
		arg.ID,
	)
	return err
}

const updateInventory = `-- name: UpdateInventory :exec
UPDATE inventory 
SET location_id = $1, chicken_count = $2, load_date = $3, updated_at = NOW() 
WHERE id = $4
`

type UpdateInventoryParams struct {
	LocationID   *int32      `json:"location_id"`
	ChickenCount *int32      `json:"chicken_count"`
	LoadDate     pgtype.Date `json:"load_date"`
	ID           int32       `json:"id"`
}

func (q *Queries) UpdateInventory(ctx context.Context, arg UpdateInventoryParams) error {
	_, err := q.db.Exec(ctx, updateInventory,
		arg.LocationID,
		arg.ChickenCount,
		arg.LoadDate,
		arg.ID,
	)
	return err
}

const updateLocation = `-- name: UpdateLocation :exec
UPDATE locations 
SET name = $1, description = $2, updated_at = NOW() 
WHERE id = $3
`

type UpdateLocationParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	ID          int32   `json:"id"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) error {
	_, err := q.db.Exec(ctx, updateLocation, arg.Name, arg.Description, arg.ID)
	return err
}
