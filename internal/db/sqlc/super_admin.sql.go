// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: super_admin.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSuperAdmin = `-- name: CreateSuperAdmin :one
INSERT INTO super_admin (username, password_hash)
VALUES ($1, $2)
RETURNING id, username, created_at, updated_at
`

type CreateSuperAdminParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
}

type CreateSuperAdminRow struct {
	ID        int32              `json:"id"`
	Username  string             `json:"username"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateSuperAdmin(ctx context.Context, arg CreateSuperAdminParams) (CreateSuperAdminRow, error) {
	row := q.db.QueryRow(ctx, createSuperAdmin, arg.Username, arg.PasswordHash)
	var i CreateSuperAdminRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSuperAdmin = `-- name: DeleteSuperAdmin :exec
DELETE FROM super_admin
WHERE id = $1
`

func (q *Queries) DeleteSuperAdmin(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSuperAdmin, id)
	return err
}

const getSuperAdmin = `-- name: GetSuperAdmin :one
SELECT id, username, created_at, updated_at
FROM super_admin
WHERE id = $1
`

type GetSuperAdminRow struct {
	ID        int32              `json:"id"`
	Username  string             `json:"username"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetSuperAdmin(ctx context.Context, id int32) (GetSuperAdminRow, error) {
	row := q.db.QueryRow(ctx, getSuperAdmin, id)
	var i GetSuperAdminRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSuperAdminByUsername = `-- name: GetSuperAdminByUsername :one
SELECT id, username, created_at, updated_at
FROM super_admin
WHERE username = $1
`

type GetSuperAdminByUsernameRow struct {
	ID        int32              `json:"id"`
	Username  string             `json:"username"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetSuperAdminByUsername(ctx context.Context, username string) (GetSuperAdminByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getSuperAdminByUsername, username)
	var i GetSuperAdminByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSuperAdmins = `-- name: ListSuperAdmins :many
SELECT id, username, created_at, updated_at
FROM super_admin
ORDER BY username
`

type ListSuperAdminsRow struct {
	ID        int32              `json:"id"`
	Username  string             `json:"username"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) ListSuperAdmins(ctx context.Context) ([]ListSuperAdminsRow, error) {
	rows, err := q.db.Query(ctx, listSuperAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSuperAdminsRow
	for rows.Next() {
		var i ListSuperAdminsRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSuperAdmin = `-- name: UpdateSuperAdmin :exec
UPDATE super_admin
SET username = $1, password_hash = $2, updated_at = NOW()
WHERE id = $3
`

type UpdateSuperAdminParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	ID           int32  `json:"id"`
}

func (q *Queries) UpdateSuperAdmin(ctx context.Context, arg UpdateSuperAdminParams) error {
	_, err := q.db.Exec(ctx, updateSuperAdmin, arg.Username, arg.PasswordHash, arg.ID)
	return err
}
